plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'org.springframework.boot' version '3.1.0' apply false
	id 'io.spring.dependency-management' version '1.1.0'
	id 'io.github.gradle-nexus.publish-plugin' version "1.3.0"
}

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

group = 'com.acltabontabon'
description = 'Isalin is a spring-boot library that aims to provide a less boilerplate and convenient way of using the Google translate API.'
sourceCompatibility = '17'
targetCompatibility = '17'

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	api 'com.google.cloud:google-cloud-translate:2.30.0'
	api 'org.springframework:spring-aspects'
	api 'org.springframework.boot:spring-boot-autoconfigure'
	api 'org.slf4j:slf4j-api'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
	systemProperties System.properties
}

java {
	withSourcesJar()
	withJavadocJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = project.group.toString()
			artifactId = project.name
			version = project.version.toString()
			description = project.description.toString()

			from components.java

			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}

			pom {
				name = project.name
				description = project.description.toString()
				url = 'https://github.com/acltabontabon/isalin'

				licenses {
					license {
						name = 'MIT'
						url = 'https://opensource.org/license/mit/'
					}
				}
				developers {
					developer {
						id = 'aclt'
						name = 'Alvin Cris Tabontabon'
						email = 'me@acltabontabon.com'
					}
				}
				scm {
					url = 'https://github.com/acltabontabon/isalin.git'
					connection = 'scm:git:git://github.com/acltabontabon/isalin.git'
					developerConnection = 'scm:git:git://github.com/acltabontabon/isalin.git'
				}
				issueManagement {
					url = 'https://github.com/acltabontabon/isalin/issues'
				}
			}
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
			var ossrhUsername = providers
					.environmentVariable("OSSRH_USERNAME")
					.forUseAtConfigurationTime()
			var ossrhPassword = providers
					.environmentVariable("OSSRH_PASSWORD")
					.forUseAtConfigurationTime()
			if (ossrhUsername.isPresent() && ossrhPassword.isPresent()) {
				username.set(ossrhUsername.get())
				password.set(ossrhPassword.get())
			}
		}
	}
}

signing {
	var signingKey = providers.environmentVariable("GPG_SIGNING_KEY")
	var signingPassphrase = providers.environmentVariable("GPG_SIGNING_PASSPHRASE")

	if (signingKey.isPresent() && signingPassphrase.isPresent()) {
		useInMemoryPgpKeys(signingKey.get(), signingPassphrase.get())
		sign publishing.publications.mavenJava
	}
}